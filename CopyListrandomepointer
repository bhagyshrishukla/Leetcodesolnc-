/*
// Definition for a Node.
public class Node {
    public int val;
    public Node next;
    public Node random;
    
    public Node(int _val) {
        val = _val;
        next = null;
        random = null;
    }
}
*/

public class Solution {
    public Node CopyRandomList(Node head) {
        if (head == null) return null;
            var map = new Dictionary<Node, Node>();
            var curr = head;
            while (curr != null)
            {
                var clone = CloneNode(curr, map);
                clone.next = CloneNode(curr.next, map);
                clone.random = CloneNode(curr.random, map);

                curr = curr.next;
            }
            return map[head];
        
    }
    private Node CloneNode(Node node, IDictionary<Node, Node> map)
    {
        if(node==null)  return null;
         if (map.ContainsKey(node)) return map[node];
        var clone=new Node(node.val);
        map[node]=clone;
        return clone;
    }
}
